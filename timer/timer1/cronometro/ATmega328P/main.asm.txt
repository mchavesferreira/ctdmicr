;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   ter set 8 2015
; Processor: ATmega328P
; Compiler:  AVRASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================
.equ SP1 = pb0
.equ AL = pb4
.equ M1 = pb5
;====================================================================
; VARIABLES
;====================================================================
.def caixas = r0 ; define nnome caixas para o registrador de trabalho
;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      rjmp  Start

;====================================================================
; CODE SEGMENT
;====================================================================
.include "lib328Pv01.inc" ;incluindo arquivo de rotinas lib...
Start:
      ; Write your code here
      cbi ddrb,0 ;configurando pb0 como entrada
      sbi portb,0 ;configurando pul-up na pb0
      sbi ddrb,4 ;configurando pb4 como saída (como é saída sem pul-up)
      sbi ddrb,5 ; pb5 saída 5
      ldi aux,0 ; carrega aux com valor 0
      mov caixas,aux  ; copia o valor de aux em caixas
      mov display_number,caixas
      rcall display_write
Loop:
      sbi portb,M1 ;ativa motor M1
      cbi portb,AL
 SP1ON:
      sbic pinb,SP1
      rjmp SP1ON
      ldi delay_time,1
      rcall delay_seconds
      
 SP1OFF:
      sbis pinb,SP1 ;verifica se o sensor está desativado. sim= pula, não= segue
      rjmp SP1OFF
      
      inc caixas ; caixas = caixas+1 (incrementa o número de caixas)
      mov display_number,caixas ;display number = caixas (copia no display o número de caixas)
      rcall display_write ;  a rotina para mostrar no display
      ldi aux,4 ;carrega aux com valor 12
      eor aux,caixas ;faz uma porta lógica xor entre aux e caixas
      ;brne Loop; se diferente de 0 volta loop, se naõ 0
      breq ALERTA
      rjmp  Loop

 ALERTA:
      cbi portb,M1 ; desliga motor
      sbi portb,AL ; aciona alerta
      ldi delay_time,1
      rcall delay_seconds ;espera 1 segundo
      cbi portb,AL ; desliga alerta
      ldi delay_time,1
      rcall delay_seconds
      rjmp ALERTA
      
      
      
;====================================================================
